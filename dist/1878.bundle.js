"use strict";(self.webpackChunkui_geeks_in=self.webpackChunkui_geeks_in||[]).push([[1878],{11878:(e,t,n)=>{n.r(t),n.d(t,{default:()=>r});var a=n(67294),l=n(87398),o=n(68947),s=n(12050),c=n(9167);const r=function(){return a.createElement(a.Fragment,null,a.createElement(l.Z,{as:"h2"},"State"),a.createElement(o.Z,null,"State is a way to ",a.createElement(c.B,null,'"preserve"')," values between multiple renders.",a.createElement(s.Z,null)," ",a.createElement(c.I,null,"State")," is ",a.createElement(c.BI,null,"local")," to the component, which means the ",a.createElement(c.I,null,"state")," of a component can't be accessed by another component, unless ",a.createElement(c.I,null,"state")," value is passed as ",a.createElement(c.BI,null,'"prop"')," to another component."),a.createElement(l.Z,{as:"h3"},"Unidirectional or top-down data flow"),a.createElement(o.Z,null,"Neither parent nor child components can know if a certain component is stateful or stateless. This is why the state is often called local or encapsulated. It is not accessible to any other component other than the one that owns and sets it. A component may choose to pass its state as props to its child components."),a.createElement(o.Z,null,"This is commonly called a ",a.createElement(c.B,null,'"top-down"')," or ",a.createElement(c.B,null,'"unidirectional"'),a.createElement(s.Z,null)," data flow. Any state is always owned by some specific component, and any data or UI derived from that state can only affect components ",a.createElement(c.B,null,'"below" them in the tree'),"."))}}}]);