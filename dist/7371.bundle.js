"use strict";(self.webpackChunkui_geeks_in_web=self.webpackChunkui_geeks_in_web||[]).push([[7371,4444,3734,147,266,4503,2108,285,1861,9695,1818,6149,3751,2004,8986,9127],{74444:(e,l,t)=>{t.r(l),t.d(l,{default:()=>m});var n=t(67294),a=t(74214),r=t(87398),i=t(26006),c=t(68947),o=t(12050),s=t(33470);const m=function(){return n.createElement(n.Fragment,null,n.createElement(r.Z,{as:"h2"},"Comments"),n.createElement(c.Z,null,"Comments should be added to improve code readability by explaining the purpose of code. Comments behave like whitespaces and are discarded during script execution."),n.createElement(r.Z,{as:"h3"},"Single Line Comment"),n.createElement(c.Z,null,"Single line comments start with ",n.createElement(s.Z,{bold:!0},"//")," character. As the name suggests, comments can't be spread in multiple lines, it has to be contained within a single line."),n.createElement(a.Z,null,"// I am a single line comment, contained within single line\n// Although, there can be multiple single line comments in a file"),n.createElement(r.Z,{as:"h3"},"Multi Line Comment"),n.createElement(c.Z,null,"Sometimes it is required to write a more elaborated explanation, which spreads in multi line, multi line comment could be used for these cases. Multi line comment start with ",n.createElement(s.Z,{bold:!0},"/*")," and should end with",n.createElement(s.Z,{bold:!0},"*/")," characters."),n.createElement(a.Z,null,"/*\nI am a multi line comment,\nand can be use to write an \nelaborated comment.\n*/\n"),n.createElement(i.Z,null,"Note: There's a third type of comment syntax written at the start of some JavaScript files, which looks like",n.createElement(s.Z,{bold:!0},"#!/usr/bin/env node"),". This is called",n.createElement(s.Z,{bold:!0},"HashBang Comment"),n.createElement(o.Z,null),"syntax, and is a special comment used to specify the path to a particular JavaScript engine that should execute the script."))}},73734:(e,l,t)=>{t.r(l),t.d(l,{default:()=>s});var n=t(67294),a=t(74214),r=t(87398),i=t(68947),c=t(9167),o=t(33470);const s=function(){return n.createElement(n.Fragment,null,n.createElement(r.Z,{as:"h3"},"const"),n.createElement(i.Z,null,"This is used to declare variables whose values are never intended to change. It is also available from the block it is declared within.",n.createElement(c.cJ,null),n.createElement(c.cJ,null),n.createElement(o.Z,{italic:!0},"Syntax: ",n.createElement(c.BI,null,"const "),"<variable-name>=<optional-assignment>;"),n.createElement(a.Z,null,"const PI = 3.14;\n          \nPI = 4; // Error\n// Because constant variable can't be changed.         \n")),n.createElement(i.Z,null,"Properties of ",n.createElement(c.BI,null,"Object")," and",n.createElement(o.Z,{bold:!0},"elements of an Array")," are not ",n.createElement(c.I,null,"protected"),", even declaring with ",n.createElement(c.BI,null,"const")," keyword.",n.createElement(c.cJ,null),n.createElement(a.Z,null,"// Constant Object declaration\nconst obj = { a : 10 };\nobj.a = 20;\nconsole.log(obj);\t\t// { a : 20 }\n\n// Constant Array declaration\nconst arr = [1, 2, 5];\narr.push(10);\nconsole.log(arr);\t\t// [1, 2, 5, 10]\n")))}},30147:(e,l,t)=>{t.r(l),t.d(l,{default:()=>s});var n=t(67294),a=t(26006),r=t(68947),i=t(12050),c=t(9167),o=t(33470);const s=function(){return n.createElement(n.Fragment,null,n.createElement(r.Z,null,"JavaScript is ",n.createElement(c.BI,null,"case-sensitive")," ",n.createElement(i.Z,null),"and uses the ",n.createElement(c.BI,null,"Unicode")," ",n.createElement(i.Z,null)," characters set. In JavaScript, instructions are called ",n.createElement(o.Z,{bold:!0},"statements")," and are separated by ",n.createElement(o.Z,{bold:!0},"semicolon (;)"),". A semicolon is not necessary after a statement, if it is written on its own line. But if more than one statement is written in a line, then they must be separated by semicolon."),n.createElement(a.Z,null,"It is considered best practice to always write a semicolon after a statement. This practice reduces the chances of errors in the code."),n.createElement(a.Z,null,"ECMAScript also has rules of ",n.createElement(c.BI,null,"Automatic Semicolon Insertion(ASI)"),". Some JavaScript statements must be terminated with semicolon and are therefore affected by ASI. Few cases where ASI is executed:",n.createElement(c.GS,{unOrdered:!0,items:[{label:n.createElement(n.Fragment,null,"Variable declaration using ",n.createElement(c.BI,null,"let, const, var"),".")},{label:n.createElement(n.Fragment,null,"Module declaration using ",n.createElement(c.BI,null,"import, export"),".")},{label:"Expression statement."},{label:n.createElement(n.Fragment,null,n.createElement(c.BI,null,"debugger, continue, break, throw, return"),".")}]})),n.createElement(r.Z,null,"The source code of JavaScript is scanned from",n.createElement(c.BI,null,"left")," ",n.createElement(i.Z,null)," to ",n.createElement(c.BI,null,"right"),", and is converted into a sequence of input elements which are ",n.createElement(c.BI,null,"tokens"),",",n.createElement(c.BI,null,"control characters"),",",n.createElement(c.BI,null,"line terminators"),",",n.createElement(c.BI,null,"comments"),n.createElement(i.Z,null)," or ",n.createElement(c.BI,null,"whitespaces")," ",n.createElement(i.Z,null),"(Spaces, tabs and new line characters are considered as whitespace)."))}},67371:(e,l,t)=>{t.r(l),t.d(l,{default:()=>f});var n=t(67294),a=t(9231),r=t(59044),i=t(87398),c=t(68947),o=t(12050),s=t(9167),m=t(63333),u=t(49997),d=t(90351),E=t(74444),b=t(30147),h=t(90285),g=t(83751),p=[{label:n.createElement(n.Fragment,null,"JavaScript is ",n.createElement(s.B,null,"case sensitive"),", instructions are called ",n.createElement(o.Z,null),n.createElement(s.B,null,"statements")," which are separated by ",n.createElement(s.B,null,"semicolon"),".")},{label:n.createElement(n.Fragment,null,n.createElement(s.B,null,"Single/Multi-line")," ",n.createElement(s.BI,null,"comments")," should be added to improve code readability.")},{label:n.createElement(n.Fragment,null,n.createElement(s.B,null,"Variables")," are symbolic names for values and their names are called",n.createElement(s.B,null,"identifiers"),".")},{label:n.createElement(n.Fragment,null,n.createElement(s.BI,null,"let")," and ",n.createElement(s.BI,null,"const")," declare ",n.createElement(s.B,null,"block scope")," while",n.createElement(o.Z,null)," ",n.createElement(s.BI,null,"var")," declare ",n.createElement(s.B,null,"function/global scope")," variables.")},{label:n.createElement(n.Fragment,null,n.createElement(s.B,null,"Variable")," names should include ",n.createElement(s.I,null,"Latin characters")," ",n.createElement(o.Z,null),n.createElement(s.B,null,"(0-9,a-z,A-Z)")," and ",n.createElement(s.B,null,'underscore "_"'),".")},{label:n.createElement(n.Fragment,null,"Prefer naming variables using ",n.createElement(s.B,null,"camelCase"),", ",n.createElement(s.B,null,"intuitive")," names.")},{label:n.createElement(n.Fragment,null,"Unassigned variables will return ",n.createElement(s.BI,null,"undefined"),".")},{label:n.createElement(n.Fragment,null,"Variables can be declared in ",n.createElement(s.B,null,"global"),", ",n.createElement(s.B,null,"local")," and ",n.createElement(o.Z,null),n.createElement(s.B,null,"block scope"),".")},{label:n.createElement(n.Fragment,null,"Variables are ",n.createElement(s.B,null,'"hoisted"')," to top of function, so they can be referred before their declaration.")},{label:n.createElement(n.Fragment,null,"JavaScript is ",n.createElement(s.B,null,"dynamically typed"),", so ",n.createElement(s.I,null,"data types")," are converted ",n.createElement(s.B,null,"as-needed")," during execution.")},{label:n.createElement(n.Fragment,null,n.createElement(s.B,null,"Literals")," represent values in JavaScript.")},{label:n.createElement(n.Fragment,null,n.createElement(s.B,null,"Template Literals")," are string values enclosed by the ",n.createElement(o.Z,null),n.createElement(s.B,null,"back-tick(`)"),".")},{label:n.createElement(n.Fragment,null,n.createElement(s.I,null,"Trailing commas")," at the end of ",n.createElement(s.B,null,"Array literal")," are ",n.createElement(o.Z,null),n.createElement(s.B,null,"ignored"),", while ",n.createElement(s.B,null,"two commas")," in a row adds an ",n.createElement(s.BI,null,"empty"),n.createElement(o.Z,null)," slot.")},{label:n.createElement(n.Fragment,null,"Properties of Object can be read by ",n.createElement(s.B,null,"dot (.)")," or ",n.createElement(o.Z,null),n.createElement(s.B,null,"bracket ([])")," notation.")},{label:n.createElement(n.Fragment,null,"The ",n.createElement(s.BI,null,"let")," and ",n.createElement(s.BI,null,"const")," variables are in the ",n.createElement(o.Z,null),n.createElement(s.B,null,"Temporal Dead Zone (TDZ)")," from ",n.createElement(s.I,null,"start of scope")," to their",n.createElement(o.Z,null)," ",n.createElement(s.I,null,"declaration")," statement.")},{label:n.createElement(n.Fragment,null,"Accessing variables of the ",n.createElement(s.B,null,"Temporal Dead Zone")," will give ",n.createElement(o.Z,null),n.createElement(s.BI,null,"ReferenceError"),".")}],v=function(){return(0,a.Z)("UI-Geeks: JavaScript | Grammer and types"),n.createElement(r.Z,null,n.createElement(i.Z,null,"Grammar and types"),n.createElement(b.default,null),n.createElement(E.default,null),n.createElement(g.default,null),n.createElement(h.default,null),n.createElement(u.Z,{items:p}),n.createElement(c.Z,null,n.createElement(m.Z,{questions:d.GrammerQuestions})))};const f=(0,n.memo)(v)},90266:(e,l,t)=>{t.r(l),t.d(l,{default:()=>s});var n=t(67294),a=t(74214),r=t(87398),i=t(68947),c=t(9167),o=t(33470);const s=function(){return n.createElement(n.Fragment,null,n.createElement(r.Z,{as:"h3"},"let"),n.createElement(i.Z,null,"This allows us to declare block-level variables. The declared variable is available from the block it is enclosed within. In JavaScript, a block is the body within "," braces.",n.createElement(c.cJ,null),n.createElement(c.cJ,null),n.createElement(o.Z,{italic:!0},"Syntax: ",n.createElement(c.BI,null,"let"),"<variable-name>=<optional-assignment>;"," "),n.createElement(a.Z,null,'let name = "JavaScript"; \nlet unInitializedVariable; '),n.createElement(o.Z,{bold:!0},"Scope of let"),n.createElement(a.Z,null,"// letVar is not visible here\nfor(let letVar=1; letVar < 5; letVar ++) {\n\t// letVar is visible here, it is only available within the block\n\t// it is enclosed within. Here block is the for loop.\n}\n// letVar is not visible here")))}},84503:(e,l,t)=>{t.r(l),t.d(l,{default:()=>s});var n=t(67294),a=t(74214),r=t(87398),i=t(68947),c=t(9167),o=t(62108);const s=function(){return n.createElement(n.Fragment,null,n.createElement(r.Z,{as:"h2"},"Literals"),n.createElement(i.Z,null,"Literals represent ",n.createElement(c.B,null,"values")," in JavaScript. These are the values of the variables and not the type of the variables.",n.createElement(c.cJ,null),n.createElement(c.cJ,null),n.createElement(c.GS,{unOrdered:!0,items:[{label:"Numeric Literals"},{label:"String Literals"},{label:"Boolean Literals"},{label:"Array Literals"},{label:"Object Literals"},{label:"RegExp Literals"}]}),n.createElement(r.Z,{as:"h3"},"Numeric Literals"),n.createElement(i.Z,null,"Any valid integer and floating point numbers."),n.createElement(a.Z,null,"// Examples:\nlet a = 20;\nlet b = 12.25;\nlet a = 011;\nlet a = 0x1123;\n")),n.createElement(o.default,null),n.createElement(i.Z,null,n.createElement(r.Z,{as:"h3"},"Boolean Literals"),n.createElement(i.Z,null,"Boolean type has only 2 literal values: ",n.createElement(c.BI,null,"true")," and",n.createElement(c.BI,null,"false"),".")),n.createElement(i.Z,null,n.createElement(r.Z,{as:"h3"},"Array Literals"),n.createElement(i.Z,null,"An array literal is a list of zero or more expressions enclosed in square brackets ",n.createElement(c.B,null,"[]"),"."),n.createElement(i.Z,null,n.createElement(a.Z,null,"const arr = [1, 2, 10, 20];")),n.createElement(i.Z,null,"If we put two commas in a row in an array literal, the array",n.createElement(c.B,null,"leaves the empty slot")," for the unspecified elements. Array traversal methods like ",n.createElement(c.I,null,"map()"),", skip the empty slots.",n.createElement(a.Z,null,"const arr = [1, 2, 10, , 20];   // [1, 2, 10, empty, 20]")),n.createElement(i.Z,null,"If we put a trailing comma at the end of the list, then the comma is",n.createElement(c.B,null,"ignored"),".",n.createElement(a.Z,null,"const arr = [1, 2, 10,]; // [1, 2, 10]"))),n.createElement(i.Z,null,n.createElement(r.Z,{as:"h3"},"Object Literals"),n.createElement(i.Z,null,"An object literal is a list of zero or more pairs of property name and value, enclosed in ",n.createElement(c.B,null,"{}"),"."),n.createElement(a.Z,null,'const obj = { a: 10, "invalid-key", 20 };'),n.createElement(i.Z,null,"Property names that are ",n.createElement(c.B,null,"valid identifiers"),", can be accessed with",n.createElement(c.B,null,"dot notation"),".",n.createElement(a.Z,null,"console.log(obj.a);   // 10")),n.createElement(i.Z,null,"Property names that are ",n.createElement(c.B,null,"not valid identifiers"),", can be accessed with ",n.createElement(c.B,null,"bracket notation []"),".",n.createElement(a.Z,null,'console.log(obj["invalid-key"]);    // 20'))),n.createElement(i.Z,null,n.createElement(r.Z,{as:"h3"},"RegExp Literals"),n.createElement(i.Z,null,"A regex literal is a pattern enclosed between backward slashes (",n.createElement(c.BI,null,"//"),")."),n.createElement(a.Z,null,"const re = /ab+c/;")))}},62108:(e,l,t)=>{t.r(l),t.d(l,{default:()=>m});var n=t(67294),a=t(74214),r=t(87398),i=t(26006),c=t(68947),o=t(12050),s=t(9167);const m=function(){return n.createElement(n.Fragment,null,n.createElement(r.Z,{as:"h3"},"String Literals"),n.createElement(c.Z,null,"A string literal is zero or more characters enclosed in single (') or double (\") quotes. All the ",n.createElement(s.BI,null,"String")," object methods can be called on a string literal. JavaScript automatically converts the",n.createElement(s.I,null,"string literal")," to a temporary ",n.createElement(s.BI,null,"String")," object."),n.createElement(a.Z,null,'// Examples:\nconst str = "JavaScript Literal";\n\nconsole.log("JavaScript".length); // 10\n// length is a property of the String object,\n// which can be called on string literal.\n'),n.createElement(r.Z,{as:"h4"},"Template Literals"),n.createElement(c.Z,null,"These are string values enclosed by the ",n.createElement(s.BI,null,"back-tick (`)"),n.createElement(o.Z,null)," character instead of double or single quotes. Also known as",n.createElement(o.Z,null)," ",n.createElement(s.B,null,"string interpolation"),". They provide syntactic sugar for constructing strings. ",n.createElement(s.B,null,"${ }")," construct is used to add dynamic/variable value to the string literal."),n.createElement(a.Z,null,'// Example 1:\n// Multi line string values can be created.\nconst multiLineStr = `I am a multiline\nstring`; \n\n\n// Example 2:\nconst name  = "John";\nconst str = `My name is: ${name}.`;\n\n// ${} construct is used to add dynamic/variable value to the string literal.\nconsole.log(str); // "My name is: John."\n'),n.createElement(r.Z,{as:"h4"},"Tagged Templates"),n.createElement(c.Z,null,"These are a compact syntax for specifying a template literal along with a call to a ",n.createElement(s.B,null,'"tag" function')," for ",n.createElement(s.B,null,"parsing"),". A tagged template is just a more succinct and semantic way to invoke a function that processes a string with a set of relevant values."),n.createElement(a.Z,null,"const formatArgument = (arg) => {\n  if(Array.isArray(arg)) {\n    return arg.map((itm) => `# ${itm}`)\n              .join('\\n');\n  }\n\n  if(typeof arg === \"object\") {\n    return JSON.stringify(arg);\n  }\n  return arg;\n}\n\nconst printStr = (segments, ...args) => {\n  let msg = segments[0];\n  segments.slice(1).forEach((segment, index) => {\n    msg += formatArgument(args[index]) + segment;\n  });\n  console.log(msg);\n}"),n.createElement(c.Z,null,n.createElement(s.BI,null,"segments:")," This holds the list of ",n.createElement(s.B,null,"fixed text")," of the string literal.",n.createElement(s.cJ,null),n.createElement(s.BI,null,"Args:")," Holds the list of ",n.createElement(s.B,null,"dynamic values")," of the string literal.",n.createElement(s.cJ,null),"For any valid template literal, there will always be ",n.createElement(s.B,null,"N args")," and ",n.createElement(s.B,null,"(N+1) string segments"),"."),n.createElement(a.Z,null,'const todos = ["JavaScript", "ReactJs", "Angular"];\nconst progress = { js: 90, react: 60, angular: 20};\n\nprintStr`I am learning:\\n${todos}\nAnd my progress is: ${progress}`\n\n// Output:\nI am learning:\n# JS\n# ReactJs\n# Angular\nAnd my progress is: { "js" : 90, "react": 60, "angular": 20 }\n        '),n.createElement(i.Z,null,n.createElement(s.B,null,"console.log()")," uses similar string interpolation.",n.createElement(s.cJ,null),'console.log("Learning %o with %o percent progress", "JS", 50);',n.createElement(s.cJ,null),"// \"Learning 'JS' with 50 percent progress”"))}},90285:(e,l,t)=>{t.r(l),t.d(l,{default:()=>s});var n=t(67294),a=t(74214),r=t(87398),i=t(68947),c=t(12050),o=t(9167);const s=function(){return n.createElement(n.Fragment,null,n.createElement(r.Z,{as:"h2"},"Temporal Dead Zone (TDZ)"),n.createElement(i.Z,null,"A variable declared with ",n.createElement(o.BI,null,"let")," or ",n.createElement(o.BI,null,"const")," is said to be in",n.createElement(o.BI,null,'"temporal dead zone"')," or ",n.createElement(o.BI,null,"TDZ"),", from the start of the block until code execution reaches the line where the variable is",n.createElement(c.Z,null)," ",n.createElement(o.I,null,"declared")," and ",n.createElement(o.I,null,"initialized"),"."),n.createElement(i.Z,null,"While inside the ",n.createElement(o.BI,null,"TDZ"),", the variable has not been initialized with a value and an attempt to access it will result in",n.createElement(o.B,null,"ReferenceError"),". This differs from ",n.createElement(o.BI,null,"var")," variables, which will return a value of ",n.createElement(o.BI,null,"undefined"),", if they are accessed before they are declared."),n.createElement(i.Z,null,n.createElement(o.IU,null,"Example 1:"),n.createElement(a.Z,null,"{\n  // TDZ starts at the beginning of the scope\n  console.log(varVariable);   // undefined\n  console.log(typeof varVariable);  // undefined\n  console.log(letVariable);   // ReferenceError\n  console.log(typeof letVariable);    // ReferenceError\n\n  var varVariable = 10;\n  let letVariable = 20;\n  // TDZ ends at the end of the scope\n}\n")),n.createElement(i.Z,null,"The term ",n.createElement(o.B,null,'"temporal"')," is used because the zone depends on the order of ",n.createElement(o.I,null,"execution (time)"),", rather than the order in which the code is",n.createElement(c.Z,null)," ",n.createElement(o.I,null,"written (position)"),"."))}},61861:(e,l,t)=>{t.r(l),t.d(l,{default:()=>o});var n=t(67294),a=t(74214),r=t(87398),i=t(68947),c=t(9167);const o=function(){return n.createElement(n.Fragment,null,n.createElement(r.Z,{as:"h2"},"Data type Conversion"),n.createElement(i.Z,null,"JavaScript is a ",n.createElement(c.BI,null,"dynamically typed")," language, which means we don't have to specify the datatype of a variable on declaration. The data types are automatically converted ",n.createElement(c.I,null,"as-needed")," during the script execution."),n.createElement(a.Z,null,'let a  = 10;\na = "JavaScript";\n// The type of "a" is automatically converted from number to string.\n'))}},9695:(e,l,t)=>{t.r(l),t.d(l,{default:()=>m});var n=t(67294),a=t(74214),r=t(87398),i=t(68947),c=t(12050),o=t(9167),s=t(33470);const m=function(){return n.createElement(n.Fragment,null,n.createElement(r.Z,{as:"h3"},"var"),n.createElement(i.Z,null,"It was the traditional (older) way of declaring variables, therefore, it doesn't have restrictions of block-level. Variables declared with the",n.createElement(o.BI,null,"var")," keyword have ",n.createElement(o.BI,null,"function/global level scope"),n.createElement(c.Z,null),"and therefore are accessible through the function it is declared within.",n.createElement(o.cJ,null),n.createElement(o.cJ,null),n.createElement(s.Z,{italic:!0},"Syntax: ",n.createElement(o.BI,null,"var "),"<variable-name>=<optional-assignment>;"),n.createElement(a.Z,null,'var name;   // uninitialized variable, default value is undefined.\nvar name = "JavaScript";')),n.createElement(i.Z,null,n.createElement(s.Z,{bold:!0},"Scope of var"),n.createElement(a.Z,null,"// myVar is visible here\nfor(var myVar=1; myVar < 5; myVar ++) {\n\t// myVar is visible here\n}\n// myVar is visible here\n// It is available outside the block, because it has function/global level scope.\n")))}},31818:(e,l,t)=>{t.r(l),t.d(l,{default:()=>o});var n=t(67294),a=t(74214),r=t(87398),i=t(68947),c=t(9167);const o=function(){return n.createElement(n.Fragment,null,n.createElement(r.Z,{as:"h2"},"Variable Hoisting"),n.createElement(i.Z,null,"In JavaScript, we can refer to a variable which is declared later, without getting an exception/error. This concept is known as",n.createElement(c.B,null,"hoisting"),". Variables in JavaScript are ",n.createElement(c.B,null,'"hoisted"')," (or",n.createElement(c.B,null,'"lifted"'),") to the top of the function or statement. However, variables that are hoisted return a value of ",n.createElement(c.BI,null,"undefined"),"."),n.createElement(a.Z,null,"// Example 1:\nconsole.log(x === undefined);\t// true\nvar x=10;\n\n// Example 2:\nvar a = 100;\n(function() {\n  console.log(a);   // undefined\n  var a = 50;\n})();\n"),n.createElement(c.cJ,null),n.createElement(i.Z,null,n.createElement(c.BI,null,"let")," and ",n.createElement(c.BI,null,"const")," are hoisted but not initialized. Referencing the variable in the block before the declaration results in",n.createElement(c.B,null,"ReferenceError"),", because the variable is in a",n.createElement(c.B,null,'"temporal dead zone"')," from the start of the block until the declaration is processed."),n.createElement(a.Z,null,"console.log(x); // ReferenceError\nlet x = 10;\n"))}},46149:(e,l,t)=>{t.r(l),t.d(l,{default:()=>s});var n=t(67294),a=t(74214),r=t(87398),i=t(68947),c=t(12050),o=t(9167);const s=function(){return n.createElement(n.Fragment,null,n.createElement(r.Z,{as:"h2"},"Variable Scope"),n.createElement(i.Z,null,"When a variable is declared ",n.createElement(o.I,null,"outside of function"),", it is called a",n.createElement(o.B,null,"global variable"),", because it is available to any other code in the current document. When a variable is declared ",n.createElement(o.I,null,"inside a function"),", it is called a",n.createElement(o.B,null,"local variable"),", because it is available only within that function. ",n.createElement(o.BI,null,"let"),n.createElement(c.Z,null),"and ",n.createElement(o.BI,null,"const")," declarations are ",n.createElement(o.B,null,"scoped to the block")," that they are declared within."),n.createElement(a.Z,null,"let globalVariable = 10;\nanotherGlobalVariable = 20;\n\nfunction demoVariableScope() {\n  let localVariable = 50;\n  for(let blockVariable = 1; blockVariable <  5 ; blockVariable++) {\n      console.log(blockVariable);\n   }   \n  console.log(blockVariable); // Not available here\n}\n\nconsole.log(globalVariable ); // Available here\nconsole.log(localVariable); // Not available here"))}},12004:(e,l,t)=>{t.r(l),t.d(l,{default:()=>o});var n=t(67294),a=t(74214),r=t(87398),i=t(68947),c=t(9167);const o=function(){var e=[{label:n.createElement(n.Fragment,null,"Variable declared using the ",n.createElement(c.B,null,"var/let/const")," with no assignment, has the value of ",n.createElement(c.BI,null,"undefined"),".")},{label:n.createElement(n.Fragment,null,"Attempting to access an undeclared variable results in",n.createElement(c.B,null,"ReferenceError"),".")},{label:n.createElement(n.Fragment,null,"The ",n.createElement(c.BI,null,"undefined")," value behaves as ",n.createElement(c.BI,null,"false")," in boolean context and ",n.createElement(c.BI,null,"NaN")," in numeric context.",n.createElement(a.Z,null,"undefined + 10    // NaN \nundefined && true    // false"))},{label:n.createElement(n.Fragment,null,"The ",n.createElement(c.BI,null,"null")," value behaves as ",n.createElement(c.BI,null,"false")," in boolean context and ",n.createElement(c.BI,null,"0 (Zero)")," in numeric context.",n.createElement(a.Z,null,"null + 10   // 10\nnull && true    // false"))}];return n.createElement(n.Fragment,null,n.createElement(r.Z,{as:"h2"},"Evaluating Variables"),n.createElement(i.Z,null,"Below given rules are applied while evaluating variables.",n.createElement(c.cJ,null),n.createElement(c.cJ,null),n.createElement(c.GS,{unOrdered:!0,expanded:!0,items:e})))}},8986:(e,l,t)=>{t.r(l),t.d(l,{default:()=>c});var n=t(67294),a=t(87398),r=t(68947),i=t(9167);const c=function(){var e=[{label:n.createElement(n.Fragment,null,"Prefer ",n.createElement(i.B,null,"camelCase")," naming convention. For example:"," ",n.createElement(i.I,null,"projectName, userPhone"),", etc.")},{label:n.createElement(n.Fragment,null,"Prefer using ",n.createElement(i.B,null,"underscore(_)")," for defining multi word names. For example:",n.createElement(i.I,null,"customer_Address, inventory_Management_Module"),", etc.")},{label:n.createElement(n.Fragment,null,n.createElement(i.B,null,"Don't use underscore")," (_) at the start of the name, because in certain JavaScript constructs, it is used to declare global variables. For example: ",n.createElement(i.I,null,"_globalUser"),".")},{label:n.createElement(n.Fragment,null,"Make variable names ",n.createElement(i.B,null,"intuitive"),", so they describe the data they hold.")},{label:n.createElement(n.Fragment,null,"Variable names are ",n.createElement(i.B,null,"case sensitive"),". For example",n.createElement(i.BI,null,"myVar")," is different from ",n.createElement(i.BI,null,"myvar"),".")},{label:n.createElement(n.Fragment,null,"Variable names ",n.createElement(i.B,null,"starting with numbers are not allowed"),". For example: ",n.createElement(i.I,null,"9varName")," would be an invalid name.")},{label:n.createElement(n.Fragment,null,n.createElement(i.B,null,"Reserved")," keywords should ",n.createElement(i.B,null,"not")," be used. For example: for would be an invalid name.")}];return n.createElement(n.Fragment,null,n.createElement(a.Z,{as:"h2"},"Variable Naming Rules"),n.createElement(r.Z,null,"Generally, we should stick to just using Latin characters (0-9, a-z, A-Z) and the underscore character. There are some rules/conventions to be followed by naming a variable instance.",n.createElement(i.cJ,null),n.createElement(i.cJ,null),n.createElement(i.GS,{unOrdered:!0,expanded:!0,items:e})))}},83751:(e,l,t)=>{t.r(l),t.d(l,{default:()=>g});var n=t(67294),a=t(87398),r=t(68947),i=t(9167),c=t(73734),o=t(90266),s=t(84503),m=t(61861),u=t(9695),d=t(31818),E=t(46149),b=t(12004),h=t(8986);const g=function(){return n.createElement(n.Fragment,null,n.createElement(a.Z,{as:"h2"},"Variables"),n.createElement(r.Z,null,"Variables are used as symbolic names for values. The names of variables are called ",n.createElement(i.BI,null,"identifiers"),". New variables in JavaScript are declared using one of the below keywords:",n.createElement(i.GS,{unOrdered:!0,items:[{label:"let"},{label:"const"},{label:"var"}]})),n.createElement(o.default,null),n.createElement(c.default,null),n.createElement(u.default,null),n.createElement(h.default,null),n.createElement(b.default,null),n.createElement(E.default,null),n.createElement(d.default,null),n.createElement(m.default,null),n.createElement(s.default,null))}},90351:(e,l,t)=>{t.r(l),t.d(l,{GrammerQuestions:()=>c});var n=t(67294),a=t(83819),r=t(74214),i=t(53232),c=[{id:1,question:n.createElement(n.Fragment,null,"JavaScript is case-sensitive."),options:[{label:"true",id:1},{label:"false",id:2}],type:i.M.Radio,name:"gram_1",answer:1},{id:2,question:n.createElement(n.Fragment,null,"JavaScript do not support multi-line comment."),options:[{label:"true",id:1},{label:"false",id:2}],type:i.M.Radio,name:"gram_2",answer:2},{id:3,question:n.createElement(n.Fragment,null,"Names of variables are called ",a.Fb,"."),options:[{label:"variable",id:1},{label:"keyword",id:2},{label:"identifier",id:3},{label:"literals",id:4}],type:i.M.Radio,name:"gram_3",answer:3},{id:4,question:n.createElement(n.Fragment,null,a.Fb," is used to declare variables whose values are never intended to change."),options:[{label:"var",id:1},{label:"let",id:2},{label:"const",id:3},{label:a.r,id:4}],type:i.M.Checkbox,name:"gram_4",answer:[3]},{id:5,question:n.createElement(n.Fragment,null,"What would be the output of given code:",n.createElement(r.Z,null,"const arr = [1, 2, 5];\narr.push(10);\nconsole.log(arr);")),options:[{label:"[1, 2, 5]",id:1},{label:"[1, 2, 5, 10]",id:2},{label:"Error",id:3},{label:a.WR,id:4}],type:i.M.Radio,name:"gram_5",answer:2},{id:6,question:n.createElement(n.Fragment,null,"Pick invalid variable names."),options:[{label:"myVar",id:1},{label:"9var",id:2},,{label:"dVar",id:3},,{label:"for",id:4}],type:i.M.Checkbox,name:"gram_6",answer:[2,4]},{id:7,question:n.createElement(n.Fragment,null,"let/const declarations are ",a.Fb," scoped."),options:[{label:"global",id:1},{label:"local",id:2},{label:"block",id:3},{label:a.WR,id:4}],type:i.M.Radio,name:"gram_7",answer:3},{id:8,question:n.createElement(n.Fragment,null,"Variables that are hoisted, return a value of ",a.Fb,"."),options:[{label:"null",id:1},{label:"undefined",id:2},{label:"NaN",id:3},{label:a.WR,id:4}],type:i.M.Radio,name:"gram_8",answer:2},{id:9,question:n.createElement(n.Fragment,null,"Literals represents ",a.Fb," is JavaScript."),options:[{label:"Types",id:1},{label:"Names",id:2},{label:"Values",id:3},{label:"Addresses",id:4}],type:i.M.Radio,name:"gram_9",answer:3},{id:10,question:n.createElement(n.Fragment,null,"What would be the output of given code:",n.createElement(r.Z,null,"const arr = [1, 2, 3, 5,];\nconsole.log(arr);")),options:[{label:"Error",id:1},{label:"[1, 2, 3, 5, ]",id:2},{label:"[1, 2, 3, 5]",id:3},{label:"Warning",id:4}],type:i.M.Radio,name:"gram_10",answer:3},{id:11,question:n.createElement(n.Fragment,null,"What would be the output of given code:",n.createElement(r.Z,null,"const obj = { a: 10, 'invalid-key': 5 };\nconsole.log(obj.a + ', ' + obj['invalid-key']);")),options:[{label:"10, 5",id:1},{label:"10, NaN",id:2},{label:"10, undefined",id:3},{label:"10, Error",id:4}],type:i.M.Radio,name:"gram_11",answer:1},{id:12,question:n.createElement(n.Fragment,null,"An attempt to access variable in temporal dead zone will result in",a.Fb,"."),options:[{label:"undefined",id:1},{label:"null",id:2},{label:"ReferenceError",id:3},{label:a.WR,id:4}],type:i.M.Radio,name:"gram_12",answer:3}]},74214:(e,l,t)=>{t.d(l,{Z:()=>k});var n=t(4942),a=t(94184),r=t.n(a),i=t(67294),c=t(17606),o=t(83819),s=t(28949),m=t(93379),u=t.n(m),d=t(7795),E=t.n(d),b=t(90569),h=t.n(b),g=t(3565),p=t.n(g),v=t(19216),f=t.n(v),Z=t(44589),y=t.n(Z),B=t(62428),w={};w.styleTagTransform=y(),w.setAttributes=p(),w.insert=h().bind(null,"head"),w.domAPI=E(),w.insertStyleElement=f(),u()(B.Z,w),B.Z&&B.Z.locals&&B.Z.locals;var I=function(e){var l,t=e.children,a=e.language,m=void 0===a?"typescript":a,u=e.theme,d=e.showLineNumbers,E=void 0!==d&&d,b=e.codeBlock,h=void 0!==b&&b,g=e.highlight,p=e.copyBtn,v=void 0===p||p,f=(0,i.useContext)(s.I),Z=r()((l={},(0,n.Z)(l,"".concat(o.HL,"-code"),!0),(0,n.Z)(l,"".concat(o.HL,"-code-no-copy-btn"),!v),l));return i.createElement("div",{className:Z,style:{textAlign:"left"}},i.createElement(c.Z1,{text:t,language:m,showLineNumbers:E,theme:function(){switch(u){case"dracula":return c.cL;case"anOldHope":return c.dw;case"github":return c.bW;default:return f.theme===o.bF.DARK_THEME?c.g9:c.dw}}(),wrapLines:!0,codeBlock:h,highlight:g}))};const k=(0,i.memo)(I)},26006:(e,l,t)=>{t.d(l,{Z:()=>C});var n=t(4942),a=t(94184),r=t.n(a),i=t(67294),c=t(14289),o=t(78146),s=t(67115),m=t(76792),u=t(32209),d=t(41485),E=t(39602),b=t(44680),h=t(85893);const g=(0,E.Z)("h4");g.displayName="DivStyledAsH4";const p=(0,b.Z)("alert-heading",{Component:g}),v=(0,b.Z)("alert-link",{Component:s.Z}),f={variant:"primary",show:!0,transition:u.Z,closeLabel:"Close alert"},Z=i.forwardRef(((e,l)=>{const{bsPrefix:t,show:n,closeLabel:a,closeVariant:i,className:s,children:E,variant:b,onClose:g,dismissible:p,transition:v,...f}=(0,c.Ch)(e,{show:"onClose"}),Z=(0,m.vE)(t,"alert"),y=(0,o.Z)((e=>{g&&g(!1,e)})),B=!0===v?u.Z:v,w=(0,h.jsxs)("div",{role:"alert",...B?void 0:f,ref:l,className:r()(s,Z,b&&`${Z}-${b}`,p&&`${Z}-dismissible`),children:[p&&(0,h.jsx)(d.Z,{onClick:y,"aria-label":a,variant:i}),E]});return B?(0,h.jsx)(B,{unmountOnExit:!0,...f,ref:void 0,in:n,children:w}):n?w:null}));Z.displayName="Alert",Z.defaultProps=f;const y=Object.assign(Z,{Link:v,Heading:p});var B=t(83819),w=t(93379),I=t.n(w),k=t(7795),x=t.n(k),F=t(90569),S=t.n(F),J=t(3565),V=t.n(J),A=t(19216),T=t.n(A),L=t(44589),N=t.n(L),R=t(11137),j={};j.styleTagTransform=N(),j.setAttributes=V(),j.insert=S().bind(null,"head"),j.domAPI=x(),j.insertStyleElement=T(),I()(R.Z,j),R.Z&&R.Z.locals&&R.Z.locals;var _=function(e){var l=e.children,t=e.noteText,a=void 0===t?"Note":t,c=e.variant,o=void 0===c?"primary":c,s=r()((0,n.Z)({},"".concat(B.HL,"-note"),!0));return i.createElement("div",{className:s},i.createElement("div",{className:"note-text"},a),i.createElement(y,{key:o,variant:o},l))};const C=(0,i.memo)(_)},62428:(e,l,t)=>{t.d(l,{Z:()=>c});var n=t(8081),a=t.n(n),r=t(23645),i=t.n(r)()(a());i.push([e.id,".ui-geeks-code{margin-top:1.5rem;margin-bottom:1.5rem}.ui-geeks-code-no-copy-btn button{display:none}\n",""]);const c=i},11137:(e,l,t)=>{t.d(l,{Z:()=>c});var n=t(8081),a=t.n(n),r=t(23645),i=t.n(r)()(a());i.push([e.id,".ui-geeks-note{margin-top:1.2rem;margin-bottom:3rem;font-style:italic}.ui-geeks-note .note-text{font-style:italic;position:relative;font-weight:bold;top:13px;z-index:9;margin-left:15px;background-color:#aba8f1;width:fit-content;padding:2px 10px 2px 10px;border-radius:4px}.theme-dark .ui-geeks-note .note-text{background-color:#464646}.theme-dark .ui-geeks-note .alert-primary{color:#000000;background-color:#d6d6d6;border-color:#393939}\n",""]);const c=i}}]);